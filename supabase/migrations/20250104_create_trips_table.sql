-- Create trips table
CREATE TABLE IF NOT EXISTS public.trips (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    job_id bigint NOT NULL,
    pickup_date timestamp with time zone NOT NULL,
    pickup_location text NOT NULL,
    dropoff_location text NOT NULL,
    client_pickup_time timestamp with time zone NULL,
    client_dropoff_time timestamp with time zone NULL,
    notes text NULL,
    amount numeric NOT NULL DEFAULT 0,
    status text NULL DEFAULT 'pending'::text,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by uuid NULL,
    
    CONSTRAINT trips_pkey PRIMARY KEY (id),
    CONSTRAINT trips_job_id_fkey FOREIGN KEY (job_id) REFERENCES public.jobs (id) ON DELETE CASCADE,
    CONSTRAINT trips_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users (id)
) TABLESPACE pg_default;

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_trips_job_id ON public.trips USING btree (job_id) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_trips_pickup_date ON public.trips USING btree (pickup_date) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_trips_status ON public.trips USING btree (status) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_trips_created_at ON public.trips USING btree (created_at) TABLESPACE pg_default;

-- Enable Row Level Security
ALTER TABLE public.trips ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
CREATE POLICY "Users can view trips for their jobs" ON public.trips
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM public.jobs 
            WHERE jobs.id = trips.job_id 
            AND jobs.created_by = auth.uid()
        )
    );

CREATE POLICY "Users can insert trips for their jobs" ON public.trips
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM public.jobs 
            WHERE jobs.id = trips.job_id 
            AND jobs.created_by = auth.uid()
        )
    );

CREATE POLICY "Users can update trips for their jobs" ON public.trips
    FOR UPDATE USING (
        EXISTS (
            SELECT 1 FROM public.jobs 
            WHERE jobs.id = trips.job_id 
            AND jobs.created_by = auth.uid()
        )
    );

CREATE POLICY "Users can delete trips for their jobs" ON public.trips
    FOR DELETE USING (
        EXISTS (
            SELECT 1 FROM public.jobs 
            WHERE jobs.id = trips.job_id 
            AND jobs.created_by = auth.uid()
        )
    );

-- Add comments for documentation
COMMENT ON TABLE public.trips IS 'Stores trip details for each job';
COMMENT ON COLUMN public.trips.job_id IS 'Reference to the job this trip belongs to';
COMMENT ON COLUMN public.trips.pickup_date IS 'Scheduled pickup date and time';
COMMENT ON COLUMN public.trips.pickup_location IS 'Pickup address/location';
COMMENT ON COLUMN public.trips.dropoff_location IS 'Drop-off address/location';
COMMENT ON COLUMN public.trips.client_pickup_time IS 'Actual client pickup time';
COMMENT ON COLUMN public.trips.client_dropoff_time IS 'Actual client drop-off time';
COMMENT ON COLUMN public.trips.amount IS 'Trip cost amount';
COMMENT ON COLUMN public.trips.status IS 'Trip status (pending, in_progress, completed, cancelled)';
